#+TITLE: Emacs configuration file
#+AUTHOR: Myungjin Lee
#+EMAIL: myungjin.lee@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Preamble
This is an Emacs configuration file that I use in my system. Many of them are
collected from various sources in the Internet. One key source is from
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch Configuration]].
To tangle this init.org file and generate init.el file, run =M-x org-babel-tangel=
or =C-c C-v t= in Emacs. 

* Configuration

** Basic font and frame overrides

#+begin_src emacs-lisp

;; Make font size overridable
(defvar mlee/default-font-size 180)
(defvar mlee/default-variable-font-size 180)

;; Make frame transparency overridable
(defvar mlee/frame-transparency '(90 . 90))

#+end_src


** Package system setup
This section configures use-package so that Emacs' built-in package
manager can install necessary packages automatically.

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)

(setq use-package-always-ensure t)

#+end_src


** Basic UI configuration
This section configures the basic UI settings for Emacs. 
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)          ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha mlee/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,mlee/frame-transparency))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


** Advanced UI configuration
*** Color Theme
#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-acario-dark t))
#+end_src

*** Better Modeline
#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

*** Which key
which-key is a useful UI panel that appears when you start pressing any key binding
in Emacs to offer you all possible completions for the prefix.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

*** Ivy and Councel
ivy is an excellent completion framework for Emacs. It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs. Counsel is a customized set of commands to
replace =find-file= with =counsel-find-file=, etc which provide useful commands
for each of the default completion commands.

ivy-rich adds extra columns to a few of the Counsel commands to provide more
information about each item.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

#+end_src

**** Improved candidate sorting with prescient.el
prescient.el provides some helpful behavior for sorting Ivy completion candidates
based on how recently or frequently you select them. This can be especially
helpful when using M-x to run commands that you donâ€™t have bound to a key but
still need to access occasionally.

#+begin_src emacs-lisp

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

#+end_src

*** Text scaling
This is an example of using Hydra to design a transient key binding for quickly
adjusting the scale of the text on screen. We define a hydra that is bound to
=C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.
You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

#+end_src

** One big config (TODO: split it into chunks)

#+begin_src emacs-lisp

(require 'bind-key)  ; Required for :bind in use-package

;; -----------------------------------------------------------------------------
;; configs for programming language
;; -----------------------------------------------------------------------------

(use-package company
  :demand t
  :defer 2
  :config
  (progn
    (setq company-minimum-prefix-length 2
          company-idle-delay 0.1)

    ;; Bind here rather than in ":bind" to avoid complaints about
    ;; company-mode-map not existing.
    (bind-key "C-n" 'company-select-next company-active-map)
    (bind-key "C-p" 'company-select-previous company-active-map))

  :hook (after-init . global-company-mode))

(use-package lsp-mode
  :config
  (defun mlee/lsp-setup()
    (setq lsp-idle-delay 0.5
          lsp-enable-symbol-highlighting nil
          lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
          lsp-pyls-plugins-flake8-enabled t)
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)

       ;; Disable these as they're duplicated by flake8
       ("pyls.plugins.pycodestyle.enabled" nil t)
       ("pyls.plugins.mccabe.enabled" nil t)
       ("pyls.plugins.pyflakes.enabled" nil t))))
  :hook
  ((python-mode . lsp)
   (c-mode . lsp)
   (cpp-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration)
   (lsp-before-initialize . mlee/lsp-setup)))

(use-package lsp-ui
  :config
  (defun mlee/lsp-ui-setup ()
    (setq lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-delay 0.5
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-flycheck-live-reporting nil
          lsp-ui-doc-delay 5
          lsp-eldoc-enable-hover t
          lsp-signature-doc-lines 2
          lsp-signature-auto-activate t
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-alignment 'frame
          lsp-ui-doc-header nil
          lsp-ui-doc-include-signature t
          lsp-ui-doc-use-childframe nil))
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  :commands lsp-ui-mode
  :hook ((lsp-before-initialize . mlee/lsp-ui-setup)))

;; client for c/c++ language server
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))

(use-package pyvenv
  :demand t
  :config
  (setq pyvenv-workon "emacs")  ; Default venv
  (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals

;; -----------------------------------------------------------------------------
#+end_src
