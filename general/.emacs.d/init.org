#+TITLE: Emacs configuration file
#+AUTHOR: Myungjin Lee
#+EMAIL: myungjin.lee@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Preamble
This is an Emacs configuration file that I use in my system. Many of them are
collected from various sources in the Internet. One key source is from
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch Configuration]].
To tangle this init.org file and generate init.el file, run =M-x org-babel-tangel=
or =C-c C-v t= in Emacs. 

* Configuration

** Basic font and frame overrides

#+begin_src emacs-lisp

;; Make font size overridable
(defvar mlee/default-font-size 180)
(defvar mlee/default-variable-font-size 180)

;; Make frame transparency overridable
(defvar mlee/frame-transparency '(90 . 90))

#+end_src

** Package system setup
This section configures use-package so that Emacs' built-in package
manager can install necessary packages automatically.

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)

(setq use-package-always-ensure t)

#+end_src


** Basic UI configuration
This section configures the basic UI settings for Emacs. 
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)          ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha mlee/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,mlee/frame-transparency))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


** Color Theme
#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-acario-dark t))

#+end_src
** One big config (TODO: split it into chunks)

#+begin_src emacs-lisp

(require 'bind-key)  ; Required for :bind in use-package

;; -----------------------------------------------------------------------------
;; configs for programming language
;; -----------------------------------------------------------------------------

(use-package company
  :demand t
  :defer 2
  :config
  (progn
    (setq company-minimum-prefix-length 2
          company-idle-delay 0.1)

    ;; Bind here rather than in ":bind" to avoid complaints about
    ;; company-mode-map not existing.
    (bind-key "C-n" 'company-select-next company-active-map)
    (bind-key "C-p" 'company-select-previous company-active-map))

  :hook (after-init . global-company-mode))

(use-package lsp-mode
  :config
  (defun mlee/lsp-setup()
    (setq lsp-idle-delay 0.5
          lsp-enable-symbol-highlighting nil
          lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
          lsp-pyls-plugins-flake8-enabled t)
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)

       ;; Disable these as they're duplicated by flake8
       ("pyls.plugins.pycodestyle.enabled" nil t)
       ("pyls.plugins.mccabe.enabled" nil t)
       ("pyls.plugins.pyflakes.enabled" nil t))))
  :hook
  ((python-mode . lsp)
   (c-mode . lsp)
   (cpp-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration)
   (lsp-before-initialize . mlee/lsp-setup)))

(use-package lsp-ui
  :config
  (defun mlee/lsp-ui-setup ()
    (setq lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-enable nil
          lsp-ui-sideline-delay 0.5
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-flycheck-live-reporting nil
          lsp-ui-doc-delay 5
          lsp-eldoc-enable-hover t
          lsp-signature-doc-lines 2
          lsp-signature-auto-activate t
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-alignment 'frame
          lsp-ui-doc-header nil
          lsp-ui-doc-include-signature t
          lsp-ui-doc-use-childframe nil))
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  :commands lsp-ui-mode
  :hook ((lsp-before-initialize . mlee/lsp-ui-setup)))

;; client for c/c++ language server
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))

(use-package pyvenv
  :demand t
  :config
  (setq pyvenv-workon "emacs")  ; Default venv
  (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals

;; -----------------------------------------------------------------------------
#+end_src
