#+TITLE: Emacs configuration file
#+AUTHOR: Myungjin Lee
#+EMAIL: myungjin.lee@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Preamble
This is an Emacs configuration file that I use in my system. Many of them are
collected from various sources in the Internet. One key source is from
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch Configuration]].
To tangle this emacs.org file and generate init.el file, run =M-x org-babel-tangel=
or =C-c C-v t= in Emacs. 

* Configuration

** Basic font and frame overrides

#+begin_src emacs-lisp

  ;; Make font size overridable
  (defvar mlee/default-font-size 140)
  (defvar mlee/default-variable-font-size 140)

  ;; Make frame transparency overridable
  (defvar mlee/frame-transparency '(97 . 97))

#+end_src


** Package system setup
This section configures use-package so that Emacs' built-in package
manager can install necessary packages automatically.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

#+end_src


** Basic UI configuration
This section configures the basic UI settings for Emacs. 

*** Basic settings

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha mlee/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,mlee/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  ;; term-mode-hook
                  ;; shell-mode-hook
                  ;; eshell-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; set 150 characters as fill column
  (add-hook 'text-mode-hook (lambda () (set-fill-column 150)))

  ;; disable tab
  (setq-default indent-tabs-mode nil)

#+end_src

*** JSON mode indentation hook
#+begin_src emacs-lisp

  (use-package json-mode)

#+end_src

*** Font configuration
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code" :height mlee/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height mlee/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height mlee/default-variable-font-size :weight 'regular)

#+end_src

*** Minor mode for Fira Code ligatures
#+begin_src emacs-lisp
  (use-package fira-code-mode
  :config (global-fira-code-mode))
#+end_src

** Advanced UI configuration
*** Color Theme
#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-one t)
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config))

#+end_src

*** Better Modeline
It appears that icons in all-the-icons are not displaying properly in macos.
In such a case, check the fontset currently in effect. More details are found in
the [[https://github.com/domtronn/all-the-icons.el/blob/master/README.md#troubleshooting][troubleshooting]] section from the all-the-icons github repo.
We have to use =set-fontset-font= to load the affected the font family.

The first time you load your configuration on a new machine, you’ll need to run
=M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :config
    (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'prepend)
    (set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'prepend))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

*** Which key
which-key is a useful UI panel that appears when you start pressing any key binding
in Emacs to offer you all possible completions for the prefix.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

*** Ivy and Councel
ivy is an excellent completion framework for Emacs. It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs. Counsel is a customized set of commands to
replace =find-file= with =counsel-find-file=, etc which provide useful commands
for each of the default completion commands.

ivy-rich adds extra columns to a few of the Counsel commands to provide more
information about each item.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

#+end_src

**** Improved candidate sorting with prescient.el
prescient.el provides some helpful behavior for sorting Ivy completion candidates
based on how recently or frequently you select them. This can be especially
helpful when using M-x to run commands that you don't have bound to a key but
still need to access occasionally.

#+begin_src emacs-lisp

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

#+end_src

*** Text scaling
This is an example of using Hydra to design a transient key binding for quickly
adjusting the scale of the text on screen. We define a hydra that is bound to
=C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.
You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))


#+end_src


** Org mode
Org Mode is one of the hallmark features of Emacs. It is a rich document editor,
project planner, task and time tracker, blogging engine, and literate coding
utility all wrapped up in one package.

*** Better font face
The =mlee/org-font-setup= function configures various text faces to tweak the
sizes of headings and use variable width fonts in most cases so that it looks
more like we're editing a document in =org-mode=. We switch back to fixed width
(monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

(defun mlee/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

#+end_src

*** Basic config
This section contains the basic configuration for =org-mode=. The following code
block was blindly copied from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch Configuration]].

#+begin_src emacs-lisp

  (defun mlee/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :hook (org-mode . mlee/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (mlee/org-font-setup))

#+end_src

*** Nicer Heading Bullets 
org-bullets replaces the heading stars in =org-mode= buffers with nicer looking
characters that you can control.

#+begin_src  emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center org buffers
#+begin_src emacs-lisp

  (defun mlee/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mlee/org-mode-visual-fill))

#+end_src



** Development/Productivity
*** IDE feature: lsp-mode
#+begin_src emacs-lisp

  (defun mlee/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :config
    (lsp-enable-which-key-integration t)
    :hook
    ((python-mode . lsp)
     (c-mode . lsp)
     (cpp-mode . lsp)
     (lsp-mode . mlee/lsp-mode-setup)
     (go-mode-hook . lsp-deferred))
    :init
    (setq lsp-keymap-prefix "C-c l"))  ;; Or 'C-l', 's-l'

  ;;Set up before-save hooks to format buffer and add/delete imports.
  ;;Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

#+end_src

*** IDE feature: lsp-ui
#+begin_src emacs-lisp

  ;; (use-package lsp-ui
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))

  (use-package lsp-ui
    :config
    (defun mlee/lsp-ui-setup ()
      (setq lsp-ui-sideline-show-hover nil
            lsp-ui-sideline-enable nil
            lsp-ui-sideline-delay 0.5
            lsp-ui-sideline-ignore-duplicate t
            lsp-ui-flycheck-live-reporting nil
            lsp-ui-doc-delay 5
            lsp-eldoc-enable-hover t
            lsp-signature-doc-lines 2
            lsp-signature-auto-activate t
            lsp-ui-doc-position 'bottom
            lsp-ui-doc-alignment 'frame
            lsp-ui-doc-header nil
            lsp-ui-doc-include-signature t
            lsp-ui-doc-use-childframe nil))
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    :commands lsp-ui-mode
    :hook ((lsp-before-initialize . mlee/lsp-ui-setup)))

#+end_src

*** IDE feature: lsp-treemacs
#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** IDE feature: go-mode
#+begin_src emacs-lisp

  (use-package go-mode
    :hook ((go-mode . lsp)))

#+end_src

*** IDE feature: flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
  #+end_src
  
*** IDE feature: YAML mode
#+begin_src emacs-lisp

  (use-package yaml-mode)

#+end_src

*** Python environments

Provides the `py-yapf' command, which uses the external "yapf"
tool to tidy up the current buffer.
The "yapf" should be installed by running =pacman -S yapf= in arch linux.
If OS is not arch linux, the package can be installed via  =pip install yapf=.

In order to use different style (e.g., google, facebook), run the following in shell:
#+begin_src shell

mkdir -p ~/.config/yapf
cat << EOF >> ~/.config/yapf/style
[style]
based_on_style = facebook
EOF

#+end_src

#+begin_src  emacs-lisp

  (use-package py-yapf
    :config
    (add-hook 'python-mode-hook 'py-yapf-enable-on-save))

#+end_src


#+begin_src  emacs-lisp

  (use-package py-isort
    :config
    (add-hook 'before-save-hook 'py-isort-before-save))

#+end_src

#+begin_src emacs-lisp

  (use-package pyvenv
    :demand t
    :config
    (setq pyvenv-workon "emacs")  ; Default venv
    (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals

#+end_src
*** Client for c/c++ language server protocol
#+begin_src emacs-lisp

  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))

#+end_src

*** Projectile
Projectile is a project management library for Emacs which makes it a lot easier
to navigate around code projects for various languages. Many packages integrate
with Projectile so it's a good idea to have it installed even if you don't use
its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

*** Treemacs all the icons

#+begin_src  emacs-lisp

  (use-package treemacs-all-the-icons
    :after treemacs)

#+end_src

*** Treemacs
Adjust DOOM Themes settings for Treemacs. The folloing  lambda function sets
root icon to be regular folder icon, and adds 'chevron' icons to directories in
order to display opened and closed states.  Also it indents all file icons with
two spaces to match new directory icon indentation.

#+begin_src emacs-lisp

  (eval-after-load 'treemacs
    (lambda ()
      (unless (require 'all-the-icons nil t)
        (error "`all-the-icons' isn't installed"))
      (let ((all-the-icons-default-adjust 0))
        (setq treemacs-icons-hash (make-hash-table :size 200 :test #'equal)
              treemacs-icon-fallback (concat "  " (all-the-icons-octicon "file-code" :v-adjust 0) " ")
              treemacs-icon-text treemacs-icon-fallback))
      (treemacs-modify-theme "Default"
        :icon-directory (f-join treemacs-dir "icons/default")
        :config
        (progn
          (treemacs-create-icon
           :icon (concat (all-the-icons-octicon
                          "chevron-right"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " "
                         (all-the-icons-octicon
                          "repo"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions (root-closed))
          (treemacs-create-icon
           :icon (concat (all-the-icons-octicon
                          "chevron-down"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " "
                         (all-the-icons-octicon
                          "repo"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions (root-open))
          (treemacs-create-icon
           :icon (concat (all-the-icons-octicon
                          "chevron-right"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " "
                         (all-the-icons-octicon
                          "file-directory"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions (dir-closed))
          (treemacs-create-icon
           :icon (concat (all-the-icons-octicon
                          "chevron-down"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " "
                         (all-the-icons-octicon
                          "file-directory"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions (dir-open))
          (treemacs-create-icon
           :icon (concat "  " (all-the-icons-octicon
                               "git-merge"
                               :height 0.9
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions ("git" "gitignore" "gitconfig" "gitmodules" "gitattributes"))
          (treemacs-create-icon
           :icon (concat "  " (all-the-icons-octicon
                               "file-code"
                               :height 0.9
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions (".bash_profile" "el" "json" "py" "sh" "xml" "yaml" "yml"))
          (treemacs-create-icon
           :icon (concat "  " (all-the-icons-octicon
                               "file-media"
                               :height 0.9
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions ("avi" "bmp" "eps" "gif" "jpeg" "jpg" "mov" "mp4" "png" "svg"))
          (treemacs-create-icon
           :icon (concat "  " (all-the-icons-octicon
                               "file-text"
                               :height 0.9
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions ("md" "rst" "log" "org" "txt"
                        "contribute" "license" "readme" "changelog"))
          (treemacs-create-icon
           :icon (concat "  " (all-the-icons-alltheicon
                               "go"
                               :height 0.9
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal))
                         " ")
           :extensions ("go" "go.mod" "go.sum"))))
      ))

  (with-eval-after-load 'treemacs
    (defun treemacs-ignore (filename absolute-path)
      (or (string-equal filename ".mypy_cache")
          (string-prefix-p "/x/y/z/" absolute-path)))
    (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore))

#+end_src

*** Company

#+begin_src emacs-lisp

  (require 'bind-key)  ; Required for :bind in use-package

  (use-package company
    :demand t
    :defer 2
    :config
    (progn
      (setq company-minimum-prefix-length 2
            company-idle-delay 0.1)

      ;; Bind here rather than in ":bind" to avoid complaints about
      ;; company-mode-map not existing.
      (bind-key "C-n" 'company-select-next company-active-map)
      (bind-key "C-p" 'company-select-previous company-active-map))

    :hook (after-init . global-company-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Magit
Magit is the best Git interface. Common Git operations are easy to execute
quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

*** Rainbow Delimiters
rainbow-delimiters is useful in programming modes because it colorizes nested
parentheses and brackets according to their nesting depth. This makes it a lot
easier to visually match parentheses in Emacs Lisp code without having to count
them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
*** Diff-hl
diff-hl highlights uncommitted changes. In particular, =diff-hl-flydiff-mode=
implements highlighting changes on the fly. This requires Emacs 24.4 or newer.

#+begin_src emacs-lisp

  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode))

#+end_src
*** Auto brackets
#+begin_src emacs-lisp

  (electric-pair-mode 1)

#+end_src

*** Protobuf mode
#+begin_src emacs-lisp

  (use-package protobuf-mode)

#+end_src
